{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Imports "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb \n",
    "from sklearn.model_selection import train_test_split\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=pd.read_csv('data/diabetes.csv',sep=',')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Pregnancies               768 non-null    int64  \n",
      " 1   Glucose                   768 non-null    int64  \n",
      " 2   BloodPressure             768 non-null    int64  \n",
      " 3   SkinThickness             768 non-null    int64  \n",
      " 4   Insulin                   768 non-null    int64  \n",
      " 5   BMI                       768 non-null    float64\n",
      " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
      " 7   Age                       768 non-null    int64  \n",
      " 8   Outcome                   768 non-null    int64  \n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Pregnancies</th>\n",
       "      <td>768.0</td>\n",
       "      <td>3.845052</td>\n",
       "      <td>3.369578</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>3.0000</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>17.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glucose</th>\n",
       "      <td>768.0</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>0.000</td>\n",
       "      <td>99.00000</td>\n",
       "      <td>117.0000</td>\n",
       "      <td>140.25000</td>\n",
       "      <td>199.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BloodPressure</th>\n",
       "      <td>768.0</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>0.000</td>\n",
       "      <td>62.00000</td>\n",
       "      <td>72.0000</td>\n",
       "      <td>80.00000</td>\n",
       "      <td>122.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SkinThickness</th>\n",
       "      <td>768.0</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>23.0000</td>\n",
       "      <td>32.00000</td>\n",
       "      <td>99.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Insulin</th>\n",
       "      <td>768.0</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>30.5000</td>\n",
       "      <td>127.25000</td>\n",
       "      <td>846.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>768.0</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.000</td>\n",
       "      <td>27.30000</td>\n",
       "      <td>32.0000</td>\n",
       "      <td>36.60000</td>\n",
       "      <td>67.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <td>768.0</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>0.078</td>\n",
       "      <td>0.24375</td>\n",
       "      <td>0.3725</td>\n",
       "      <td>0.62625</td>\n",
       "      <td>2.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>768.0</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>21.000</td>\n",
       "      <td>24.00000</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>41.00000</td>\n",
       "      <td>81.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <td>768.0</td>\n",
       "      <td>0.348958</td>\n",
       "      <td>0.476951</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          count        mean         std     min       25%  \\\n",
       "Pregnancies               768.0    3.845052    3.369578   0.000   1.00000   \n",
       "Glucose                   768.0  120.894531   31.972618   0.000  99.00000   \n",
       "BloodPressure             768.0   69.105469   19.355807   0.000  62.00000   \n",
       "SkinThickness             768.0   20.536458   15.952218   0.000   0.00000   \n",
       "Insulin                   768.0   79.799479  115.244002   0.000   0.00000   \n",
       "BMI                       768.0   31.992578    7.884160   0.000  27.30000   \n",
       "DiabetesPedigreeFunction  768.0    0.471876    0.331329   0.078   0.24375   \n",
       "Age                       768.0   33.240885   11.760232  21.000  24.00000   \n",
       "Outcome                   768.0    0.348958    0.476951   0.000   0.00000   \n",
       "\n",
       "                               50%        75%     max  \n",
       "Pregnancies                 3.0000    6.00000   17.00  \n",
       "Glucose                   117.0000  140.25000  199.00  \n",
       "BloodPressure              72.0000   80.00000  122.00  \n",
       "SkinThickness              23.0000   32.00000   99.00  \n",
       "Insulin                    30.5000  127.25000  846.00  \n",
       "BMI                        32.0000   36.60000   67.10  \n",
       "DiabetesPedigreeFunction    0.3725    0.62625    2.42  \n",
       "Age                        29.0000   41.00000   81.00  \n",
       "Outcome                     0.0000    1.00000    1.00  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe().transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Outcome\n",
       "0    500\n",
       "1    268\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# group by the labels:\n",
    "## 1 means presence of diabetes \n",
    "## 0 means no diabetes \n",
    "data.groupby('Outcome').size()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Visualisation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f8e6869188>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the number of individuals in each class \n",
    "sb.countplot(x='Outcome',data=data )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
       "       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f8e95f8248>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# let's visulize Glucose amount versus the outcome  \n",
    "plt.figure(figsize=(8,5))\n",
    "sb.barplot(data=data,x='Outcome',y='Glucose')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f8e95aab88>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# let's visulize BloodPressure amount versus the outcome  \n",
    "plt.figure(figsize=(8,5))\n",
    "sb.barplot(data=data,x='Outcome',y='BloodPressure')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1f8e9678e08>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# let's visulize Insulin amount versus the outcome  \n",
    "plt.figure(figsize=(8,5))\n",
    "sb.barplot(data=data,x='Outcome',y='Insulin')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train Test Split "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# features \n",
    "X=data.drop('Outcome',axis=1)\n",
    "#label\n",
    "y=data.pop('Outcome')\n",
    "#split into train and test set \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Scaling Data for Better Results  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler=StandardScaler()\n",
    "X_train_scaled=scaler.fit_transform(X_train)\n",
    "X_test_scaled =scaler.fit_transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training with SVC Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\hp\\Anaconda\\anaconda3\\lib\\importlib\\_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject\n",
      "  return f(*args, **kwds)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 16 candidates, totalling 80 fits\n",
      "[CV] C=0.1, gamma=1 ..................................................\n",
      "[CV] ................................... C=0.1, gamma=1, total=   0.0s\n",
      "[CV] C=0.1, gamma=1 ..................................................\n",
      "[CV] ................................... C=0.1, gamma=1, total=   0.0s\n",
      "[CV] C=0.1, gamma=1 ..................................................\n",
      "[CV] ................................... C=0.1, gamma=1, total=   0.0s\n",
      "[CV] C=0.1, gamma=1 ..................................................\n",
      "[CV] ................................... C=0.1, gamma=1, total=   0.0s\n",
      "[CV] C=0.1, gamma=1 ..................................................\n",
      "[CV] ................................... C=0.1, gamma=1, total=   0.0s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[CV] C=0.1, gamma=0.1 ................................................\n",
      "[CV] ................................. C=0.1, gamma=0.1, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1 ................................................\n",
      "[CV] ................................. C=0.1, gamma=0.1, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1 ................................................\n",
      "[CV] ................................. C=0.1, gamma=0.1, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1 ................................................\n",
      "[CV] ................................. C=0.1, gamma=0.1, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1 ................................................\n",
      "[CV] ................................. C=0.1, gamma=0.1, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=0.1, gamma=0.01, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=0.1, gamma=0.01, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=0.1, gamma=0.01, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=0.1, gamma=0.01, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=0.1, gamma=0.01, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=0.1, gamma=0.001, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=0.1, gamma=0.001, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=0.1, gamma=0.001, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=0.1, gamma=0.001, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=0.1, gamma=0.001, total=   0.0s\n",
      "[CV] C=1, gamma=1 ....................................................\n",
      "[CV] ..................................... C=1, gamma=1, total=   0.0s\n",
      "[CV] C=1, gamma=1 ....................................................\n",
      "[CV] ..................................... C=1, gamma=1, total=   0.0s\n",
      "[CV] C=1, gamma=1 ....................................................\n",
      "[CV] ..................................... C=1, gamma=1, total=   0.1s\n",
      "[CV] C=1, gamma=1 ....................................................\n",
      "[CV] ..................................... C=1, gamma=1, total=   0.0s\n",
      "[CV] C=1, gamma=1 ....................................................\n",
      "[CV] ..................................... C=1, gamma=1, total=   0.0s\n",
      "[CV] C=1, gamma=0.1 ..................................................\n",
      "[CV] ................................... C=1, gamma=0.1, total=   0.0s\n",
      "[CV] C=1, gamma=0.1 ..................................................\n",
      "[CV] ................................... C=1, gamma=0.1, total=   0.0s\n",
      "[CV] C=1, gamma=0.1 ..................................................\n",
      "[CV] ................................... C=1, gamma=0.1, total=   0.1s\n",
      "[CV] C=1, gamma=0.1 ..................................................\n",
      "[CV] ................................... C=1, gamma=0.1, total=   0.1s\n",
      "[CV] C=1, gamma=0.1 ..................................................\n",
      "[CV] ................................... C=1, gamma=0.1, total=   0.0s\n",
      "[CV] C=1, gamma=0.01 .................................................\n",
      "[CV] .................................. C=1, gamma=0.01, total=   0.0s\n",
      "[CV] C=1, gamma=0.01 .................................................\n",
      "[CV] .................................. C=1, gamma=0.01, total=   0.0s\n",
      "[CV] C=1, gamma=0.01 .................................................\n",
      "[CV] .................................. C=1, gamma=0.01, total=   0.0s\n",
      "[CV] C=1, gamma=0.01 .................................................\n",
      "[CV] .................................. C=1, gamma=0.01, total=   0.0s\n",
      "[CV] C=1, gamma=0.01 .................................................\n",
      "[CV] .................................. C=1, gamma=0.01, total=   0.0s\n",
      "[CV] C=1, gamma=0.001 ................................................\n",
      "[CV] ................................. C=1, gamma=0.001, total=   0.0s\n",
      "[CV] C=1, gamma=0.001 ................................................\n",
      "[CV] ................................. C=1, gamma=0.001, total=   0.0s\n",
      "[CV] C=1, gamma=0.001 ................................................\n",
      "[CV] ................................. C=1, gamma=0.001, total=   0.0s\n",
      "[CV] C=1, gamma=0.001 ................................................\n",
      "[CV] ................................. C=1, gamma=0.001, total=   0.0s\n",
      "[CV] C=1, gamma=0.001 ................................................\n",
      "[CV] ................................. C=1, gamma=0.001, total=   0.0s\n",
      "[CV] C=10, gamma=1 ...................................................\n",
      "[CV] .................................... C=10, gamma=1, total=   0.1s\n",
      "[CV] C=10, gamma=1 ...................................................\n",
      "[CV] .................................... C=10, gamma=1, total=   0.1s\n",
      "[CV] C=10, gamma=1 ...................................................\n",
      "[CV] .................................... C=10, gamma=1, total=   0.1s\n",
      "[CV] C=10, gamma=1 ...................................................\n",
      "[CV] .................................... C=10, gamma=1, total=   0.1s\n",
      "[CV] C=10, gamma=1 ...................................................\n",
      "[CV] .................................... C=10, gamma=1, total=   0.0s\n",
      "[CV] C=10, gamma=0.1 .................................................\n",
      "[CV] .................................. C=10, gamma=0.1, total=   0.0s\n",
      "[CV] C=10, gamma=0.1 .................................................\n",
      "[CV] .................................. C=10, gamma=0.1, total=   0.0s\n",
      "[CV] C=10, gamma=0.1 .................................................\n",
      "[CV] .................................. C=10, gamma=0.1, total=   0.0s\n",
      "[CV] C=10, gamma=0.1 .................................................\n",
      "[CV] .................................. C=10, gamma=0.1, total=   0.0s\n",
      "[CV] C=10, gamma=0.1 .................................................\n",
      "[CV] .................................. C=10, gamma=0.1, total=   0.0s\n",
      "[CV] C=10, gamma=0.01 ................................................\n",
      "[CV] ................................. C=10, gamma=0.01, total=   0.0s\n",
      "[CV] C=10, gamma=0.01 ................................................\n",
      "[CV] ................................. C=10, gamma=0.01, total=   0.0s\n",
      "[CV] C=10, gamma=0.01 ................................................\n",
      "[CV] ................................. C=10, gamma=0.01, total=   0.0s\n",
      "[CV] C=10, gamma=0.01 ................................................\n",
      "[CV] ................................. C=10, gamma=0.01, total=   0.0s\n",
      "[CV] C=10, gamma=0.01 ................................................\n",
      "[CV] ................................. C=10, gamma=0.01, total=   0.0s\n",
      "[CV] C=10, gamma=0.001 ...............................................\n",
      "[CV] ................................ C=10, gamma=0.001, total=   0.0s\n",
      "[CV] C=10, gamma=0.001 ...............................................\n",
      "[CV] ................................ C=10, gamma=0.001, total=   0.0s\n",
      "[CV] C=10, gamma=0.001 ...............................................\n",
      "[CV] ................................ C=10, gamma=0.001, total=   0.0s\n",
      "[CV] C=10, gamma=0.001 ...............................................\n",
      "[CV] ................................ C=10, gamma=0.001, total=   0.0s\n",
      "[CV] C=10, gamma=0.001 ...............................................\n",
      "[CV] ................................ C=10, gamma=0.001, total=   0.0s\n",
      "[CV] C=100, gamma=1 ..................................................\n",
      "[CV] ................................... C=100, gamma=1, total=   0.1s\n",
      "[CV] C=100, gamma=1 ..................................................\n",
      "[CV] ................................... C=100, gamma=1, total=   0.0s\n",
      "[CV] C=100, gamma=1 ..................................................\n",
      "[CV] ................................... C=100, gamma=1, total=   0.0s\n",
      "[CV] C=100, gamma=1 ..................................................\n",
      "[CV] ................................... C=100, gamma=1, total=   0.0s\n",
      "[CV] C=100, gamma=1 ..................................................\n",
      "[CV] ................................... C=100, gamma=1, total=   0.0s\n",
      "[CV] C=100, gamma=0.1 ................................................\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ................................. C=100, gamma=0.1, total=   0.1s\n",
      "[CV] C=100, gamma=0.1 ................................................\n",
      "[CV] ................................. C=100, gamma=0.1, total=   0.1s\n",
      "[CV] C=100, gamma=0.1 ................................................\n",
      "[CV] ................................. C=100, gamma=0.1, total=   0.1s\n",
      "[CV] C=100, gamma=0.1 ................................................\n",
      "[CV] ................................. C=100, gamma=0.1, total=   0.1s\n",
      "[CV] C=100, gamma=0.1 ................................................\n",
      "[CV] ................................. C=100, gamma=0.1, total=   0.1s\n",
      "[CV] C=100, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=100, gamma=0.01, total=   0.0s\n",
      "[CV] C=100, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=100, gamma=0.01, total=   0.1s\n",
      "[CV] C=100, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=100, gamma=0.01, total=   0.0s\n",
      "[CV] C=100, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=100, gamma=0.01, total=   0.0s\n",
      "[CV] C=100, gamma=0.01 ...............................................\n",
      "[CV] ................................ C=100, gamma=0.01, total=   0.0s\n",
      "[CV] C=100, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=100, gamma=0.001, total=   0.0s\n",
      "[CV] C=100, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=100, gamma=0.001, total=   0.0s\n",
      "[CV] C=100, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=100, gamma=0.001, total=   0.0s\n",
      "[CV] C=100, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=100, gamma=0.001, total=   0.0s\n",
      "[CV] C=100, gamma=0.001 ..............................................\n",
      "[CV] ............................... C=100, gamma=0.001, total=   0.0s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  80 out of  80 | elapsed:    3.3s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=None, error_score=nan,\n",
       "             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n",
       "                           class_weight=None, coef0=0.0,\n",
       "                           decision_function_shape='ovr', degree=3,\n",
       "                           gamma='scale', kernel='rbf', max_iter=-1,\n",
       "                           probability=False, random_state=None, shrinking=True,\n",
       "                           tol=0.001, verbose=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'C': [0.1, 1, 10, 100],\n",
       "                         'gamma': [1, 0.1, 0.01, 0.001]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=2)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVC \n",
    "svc = SVC()\n",
    "#Create grid parameters \n",
    "param_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001]} \n",
    "#training \n",
    "grid=GridSearchCV(svc,param_grid,refit=True,verbose=2)\n",
    "grid.fit(X_train_scaled,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'C': 10, 'gamma': 0.001},\n",
       " SVC(C=10, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
       "     decision_function_shape='ovr', degree=3, gamma=0.001, kernel='rbf',\n",
       "     max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "     tol=0.001, verbose=False))"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.best_params_,grid.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train and predict the SVC model \n",
    "svc = SVC(C = 10, gamma =0.001,degree=3,kernel= 'rbf',verbose=False,max_iter=-1)\n",
    "svc.fit(X_train_scaled, y_train)\n",
    "pred_svc = svc.predict(X_test_scaled)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[128  23]\n",
      " [ 34  46]]\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.79      0.85      0.82       151\n",
      "           1       0.67      0.57      0.62        80\n",
      "\n",
      "    accuracy                           0.75       231\n",
      "   macro avg       0.73      0.71      0.72       231\n",
      "weighted avg       0.75      0.75      0.75       231\n",
      "\n",
      "\n",
      "\n",
      "Accuracy Score : 0.7532467532467533\n"
     ]
    }
   ],
   "source": [
    "# show the Results \n",
    "from sklearn.metrics import classification_report,confusion_matrix,accuracy_score\n",
    "print(confusion_matrix(y_test,pred_svc))\n",
    "print('\\n')\n",
    "print(classification_report(y_test,pred_svc))\n",
    "print('\\n')\n",
    "print('Accuracy Score :', accuracy_score(y_test,pred_svc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Naive Bayes Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the NB model \n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "nb = GaussianNB()\n",
    "nb.fit(X_train_scaled, y_train)\n",
    "#predict \n",
    "pred_nb = nb.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[122  29]\n",
      " [ 28  52]]\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.81      0.81       151\n",
      "           1       0.64      0.65      0.65        80\n",
      "\n",
      "    accuracy                           0.75       231\n",
      "   macro avg       0.73      0.73      0.73       231\n",
      "weighted avg       0.75      0.75      0.75       231\n",
      "\n",
      "\n",
      "\n",
      "Accuracy Score : 0.7532467532467533\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred_nb))\n",
    "print('\\n')\n",
    "print(classification_report(y_test,pred_nb))\n",
    "print('\\n')\n",
    "print('Accuracy Score :', accuracy_score(y_test,pred_nb))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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vPjiiw3P+eCDDxg1ahQZGRlMmjSJuro6BgwY0LD1Ul1dHf369Wu0FVMgaF8rvQWYC85MpltMOLNzdjPprBS3yxERkfbmowcgf13r3jNlGFz2+Ek/7euvv+add95h6dKlhISEMG3aNGbOnEn//v0pLCxk3TqnzkOHDhEfH8+f//xnnnnmGUaMGHHUvSZPnsydd94JwAMPPMCrr77KXXfdxd13383FF1/M9OnTqa2tpby8nDVr1vD73/+epUuXkpCQ0KKgtGzZMjZs2ECvXr0AJ1QmJCRQXl5OZmYm1113HVVVVdx111384x//oHfv3hQVFREcHMzUqVN58803mT59OvPnzycrK4uEhIST/nn5k1rOTkNIcBCTM9NYvGk/+cWVJ36CiIhIgFq4cCErVqxo2JPys88+Y/v27QwYMIDNmzdz7733Mn/+/KP2vmzO2rVrOffccxk2bBgzZ85k/fr1AHz66af8+Mc/BiAkJITY2FgWL15MdnZ2Q0BqSVAaN25cQzADePLJJ8nIyGDcuHHk5uayfft2vvzySyZMmEDv3r0b3ff222/nr3/9K+B0zbbWZuWtSS1np+mGzHSeXbKdt1flcveEAW6XIyIi7ckptHD5i7WW2267jV//+tdHnVu7di0fffQRTz/9NG+//TYvvPDCce/1gx/8gI8++oihQ4fy4osvsmzZsoZzxpijXrfpMXDCm8fjjOmuq6trNL4sKiqq4euFCxfy+eefs2zZMiIjIznnnHOorKw85n379OlD165dWbJkCV999RWTJk067vfiBrWcnabeiVGM65fIrBW78Xj8t4m8iIiIP02cOJHZs2dTWFgIOLM6v/32WwoKCrDWMnnyZB599FFWrVoFQExMDKWlpc3eq6ysjJSUFGpqanjzzTcbjk+YMIHnn38ecAJXSUkJEydOZObMmQ3dmfWf+/Tp07C10zvvvENdXfO78hQXF5OQkEBkZCTr169nxQpna+7x48ezePFidu3a1ei+4LSe3XTTTUyZMoWgoMCLQoFXUTs0ZUw63xaVs2zHAbdLEREROSXDhg3j4YcfZuLEiQwfPpxJkyaxb98+du/ezXnnnceIESO44447eOyxxwC49dZb+dGPftTshIAZM2YwZswYLr74YoYMGdJw/JlnnmH+/PkMGzaMzMxMNm3axPDhw/nFL37R8Br3338/AD/+8Y9Z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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# let's  search for a good vaule of K [# of neighbors ]\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "training_accuracy = []\n",
    "test_accuracy = []\n",
    "# try n_neighbors from 1 to 10\n",
    "neighbors_settings = range(1, 11)\n",
    "for n_neighbors in neighbors_settings:\n",
    "    # build the model\n",
    "    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n",
    "    knn.fit(X_train, y_train)\n",
    "    # record training set accuracy\n",
    "    training_accuracy.append(knn.score(X_train, y_train))\n",
    "    # record test set accuracy\n",
    "    test_accuracy.append(knn.score(X_test, y_test))\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.plot(neighbors_settings, training_accuracy, label=\"Training accuracy\")\n",
    "plt.plot(neighbors_settings, test_accuracy, label=\"Test accuracy\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.xlabel(\"K Neighbors\")\n",
    "plt.legend()\n",
    "plt.savefig('knn_model_params')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# so let's take k=8 \n",
    "knn = KNeighborsClassifier(n_neighbors=8)\n",
    "knn.fit(X_train, y_train)\n",
    "pred_knn = knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[124  27]\n",
      " [ 39  41]]\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.82      0.79       151\n",
      "           1       0.60      0.51      0.55        80\n",
      "\n",
      "    accuracy                           0.71       231\n",
      "   macro avg       0.68      0.67      0.67       231\n",
      "weighted avg       0.71      0.71      0.71       231\n",
      "\n",
      "\n",
      "\n",
      "Accuracy Score : 0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,pred_knn))\n",
    "print('\\n')\n",
    "print(classification_report(y_test,pred_knn))\n",
    "print('\\n')\n",
    "print('Accuracy Score :', accuracy_score(y_test,pred_knn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of KNN classifier on training set: 0.79\n",
      "Accuracy of KNN classifier on test set: 0.71\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy of KNN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))\n",
    "print('Accuracy of KNN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forrest Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rfc = RandomForestClassifier(n_estimators=600)\n",
    "rfc.fit(X_train_scaled, y_train)\n",
    "pred_rfc = rfc.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[125  26]\n",
      " [ 31  49]]\n",
      "\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.80      0.83      0.81       151\n",
      "           1       0.65      0.61      0.63        80\n",
      "\n",
      "    accuracy                           0.75       231\n",
      "   macro avg       0.73      0.72      0.72       231\n",
      "weighted avg       0.75      0.75      0.75       231\n",
      "\n",
      "\n",
      "\n",
      "Accuracy Score : 0.75\n"
     ]
    }
   ],
   "source": [
    "# Show RFC results \n",
    "print(confusion_matrix(y_test,pred_rfc))\n",
    "print('\\n')\n",
    "print(classification_report(y_test,pred_rfc))\n",
    "print('\\n')\n",
    "print('Accuracy Score : {:.2f}'.format(accuracy_score(y_test,pred_rfc)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Submit the RFC Resuls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Submission  successfully saved!\n"
     ]
    }
   ],
   "source": [
    "# since we got a good accuracy from random forest classifier we will test our data with it \n",
    "test_preds=rfc.predict(X_test_scaled)\n",
    "tests=pd.Series(test_preds)\n",
    "#submit our predictions \n",
    "submission = pd.DataFrame({'Id':tests.index, 'Outcome': tests})\n",
    "submission.set_index('Id',inplace=True)\n",
    "submission.to_csv('diabetes_submission.csv', index=False)\n",
    "print(\" Submission  successfully saved!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Outcome\n",
       "Id          \n",
       "55         0\n",
       "109        1\n",
       "76         0\n",
       "73         0\n",
       "24         1"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
